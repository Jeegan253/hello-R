for (j in 1:ncol(x))
{ector(length=nrow(x))
for (i in 1:nrow(x))
outliers[,j] <- outliers[,j]&& outlier(x[,j])
}
outlier.vec <- v
{ outlier.vec[i] <- all(outliers[i,]) } return(outlier.vec) }
tukey_multiple(y)
debug(tukey_multiple)
tukey_multiple()
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && tukey.outlier(x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{ outlier.vec[i] <- all(outliers[i,]) } return (outlier.vec)}
debug(tukey_multiple)
tukey_multiple
debug(tukey_multiple)
tukey_multiple
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && tukey.outlier(x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{ outlier.vec[i,] <- all(outliers[i,]) } return (outlier.vec)}
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && tukey.outlier(x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
outlier.vec[i,] <- all(outliers[i,])  return (outlier.vec)}
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && tukey.outlier(x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
outlier.vec[i] <- all(outliers[i,])  return (outlier.vec)}
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && tukey.outlier(x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
outlier.vec[i] <- all(outliers[i])  return (outlier.vec)}
debug(tukey_multiple)
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && tukey.outlier(x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{ outlier.vec[i] <- all(outliers[i]) }
return (outlier.vec)
}
debug(tukey_multiple)
tukey_multiple
y<- as.matrix(1:100, nrow=5)
tukey_multiple (y)
n
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && outlier (x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{ outlier.vec[i] <- all(outliers[i]) } return (outlier.vec)}
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && outlier (x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{ outlier.vec[i] <- all(outliers[i]) }
return (outlier.vec)}
debug(tukey_multiple)
y<- as.matrix(1:100, nrow=5)
tukey_multiple (y)
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && Outlier (x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{ outlier.vec[i] <- all(outliers[i]) }
return (outlier.vec)}
debug(tukey_multiple)
y<- as.matrix(1:100, nrow=5)
tukey_multiple (y)
Tukey.outlier <-Outlier(x, method = c("boxplot", "hampel"), value = TRUE,na.rm = FALSE)
install.packages("funModeling")
tukey_outlier (y)
library(funModeling)
tukey_outlier (y)
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && tukey.outlier (x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{ outlier.vec[i] <- all(outliers[i]) }
return (outlier.vec)}
debug(tukey_multiple)
debug(tukey_multiple)
y<- as.matrix(1:100, nrow=5
)
tukey_multiple(y)
quartiles <- function (a)
{
Q1<- quantile(a,0.25,names=FALSE)
Q3<- quantile (a, 0.75, names=FALSE)
quartiles <- c(First=Q1, Third= Q3, IQR = Q3-Q1)
return (quartiles)
}
tukey.outlier <- function (b)
{
quartiles <- quartile(b)
Belowthreshold <- quartiles[1]-1.5*quartiles[3]
Upperthreshold <- quartiles [2] + 1.5*quartiles[3]
Outliers <- ((b<Belowthreshold)| (b> Upperthreshold))
return(Outliers)
}
debug(quartiles)
quartiles(y)
debug(tukey.outlier)
tukey.outlier(y)
n
n
tukey.outlier <- function (b)
{
quartiles <- quartiles (b)
Belowthreshold <- quartiles[1]-1.5*quartiles[3]
Upperthreshold <- quartiles [2] + 1.5*quartiles[3]
Outliers <- ((b<Belowthreshold)| (b> Upperthreshold))
return(Outliers)
}
debug(tukey.outlier)
tukey.outlier(y)
tukey_multiple(y)
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && tukey.outlier (x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{ outlier.vec[i] <- all(outliers[i]) } return (outlier.vec)}
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && tukey.outlier (x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{ outlier.vec[i] <- all(outliers[i]) }
return (outlier.vec)}  #changed line
debug(tukey_multiple)
tukey_multiple(y)
quartiles <- function (a)
{
Q1<- quantile(a,0.25,names=FALSE)
Q3<- quantile (a, 0.75, names=FALSE)
quartiles <- c(First=Q1, Third= Q3, IQR = Q3-Q1)
return (quartiles)
}
tukey.outlier <- function (b)
{
quartiles <- quartiles (b)
Belowthreshold <- quartiles[1]-1.5*quartiles[3]
Upperthreshold <- quartiles [2] + 1.5*quartiles[3]
Outliers <- ((b<Belowthreshold)| (b> Upperthreshold))
return(Outliers)
}
debug(quartiles)
quartiles(y)
y<- as.matrix(1:100, nrow=5) #matrix for testing
debug(quartiles)
quartiles(y)
debug(tukey.outlier)
tukey.outlier(y)
tukey_multiple(y)
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && tukey.outlier (x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{ outlier.vec[i] <- all(outliers[i]) }  return (outlier.vec)}  #changed line
debug(tukey_multiple)
y<- as.matrix(1:100, nrow=5) #matrix for testing
tukey_multiple(y)
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && tukey.outlier (x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{ outlier.vec[i] <- all(outliers[i]) } return (outlier.vec)}  #changed line
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && tukey.outlier (x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{ outlier.vec[i] <- all(outliers[i]) }
return (outlier.vec)}  #changed line
debug(tukey_multiple)
y<- as.matrix(1:100, nrow=5) #matrix for testing
tukey_multiple(y)
undebug(tukey_multiple)
quartiles <- function (a)
{
Q1<- quantile(a,0.25,names=FALSE)
Q3<- quantile (a, 0.75, names=FALSE)
quartiles <- c(First=Q1, Third= Q3, IQR = Q3-Q1)
return (quartiles)
}
tukey.outlier <- function (b)
{
quartiles <- quartiles (b)
Belowthreshold <- quartiles[1]-1.5*quartiles[3]
Upperthreshold <- quartiles [2] + 1.5*quartiles[3]
Outliers <- ((b<Belowthreshold)| (b> Upperthreshold))
return(Outliers)
}
debug(quartiles) #debugging for quartile function
quartiles(y)
undebug(quartiles)
undebug(quartiles)
debug(tukey.outlier) #debugging for tukey.outlier function
tukey.outlier(y)
undebug(tukey.outlier)
debug(tukey_multiple)
tukey_multiple(y)
undebug(tukey_multiple)
infer<-infert
infer$infert<-as.factor(infer$case)
infer$par<-as.factor(infer$parity)
infer$induab<-as.factor(infer$induced)
infer$sponab<-as.factor(infer$spontaneous)
summary(infer)
logmodel <- glm(infert ~ age + education + par + induab + sponab,data=infer, family="binomial")
summary(logmodel)
confint(logmodel)
wald.test(b=coef(logmodel), Sigma= vcov(logmodel), Terms=4:6)
oddsratio<-exp(cbind(OR=coef(logmodel), confint(logmodel)))
oddsratio
library(aod)
wald.test(b=coef(logmodel), Sigma= vcov(logmodel), Terms=4:6)
plot(infer$induab,infer$infert, xlab ="Induced abortion", ylabs="Probability of infertility")
plot(infer$sponab,infer$infert, xlab ="Spontaneous abortion", ylabs="Probability of infertility")
boxplot(infer$induab,infer$infert, xlab ="Induced abortion", ylabs="Probability of infertility")
boxplot(infer$sponab,infer$infert, xlab ="Spontaneous abortion", ylabs="Probability of infertility")
boxplot(infert ~ induab, data= infer, main= "Infertility in Induced abortion"
,xlab ="Induced abortion", ylabs="Infertility")
boxplot(infert ~ sponab, data=infer, main= "Infertility in spontaneous abortion",
xlab ="Spontaneous abortion", ylabs="Infertility")
library(aod)
infer<-infert
infer$infert<-as.factor(infer$case)
infer$par<-as.factor(infer$parity)
infer$induab<-as.factor(infer$induced)
infer$sponab<-as.factor(infer$spontaneous)
summary(infer)
boxplot(infert ~ induab, data= infer, main= "Infertility in Induced abortion"
,xlab ="Induced abortion", ylabs="Infertility")
boxplot(infert,induab, data= infer, main= "Infertility in Induced abortion"
,xlab ="Induced abortion", ylabs="Infertility")
boxplot(infert ~ induab, data= infer, main= "Infertility in Induced abortion"
,xlab ="Induced abortion", ylabs="Infertility")
boxplot(infer$infert ~ infer$induab, main= "Infertility in Induced abortion"
,xlab ="Induced abortion", ylabs="Infertility")
counts1 <- table(infer$infert, infer$induab)
boxplot(counts1, main= "Infertility in Induced abortion"
,xlab ="Infertility", col=c("blue", "red"))
barplot(counts1, main= "Infertility in Induced abortion"
,xlab ="Infertility", col=c("blue", "red"),
legend=rownames(counts1), besides=TRUE)
counts1 <- table(infer$induab, infer$infert)
barplot(counts1, main= "Infertility in Induced abortion"
,xlab ="Infertility", col=c("blue", "red"),
legend=rownames(counts1), besides=TRUE)
counts1 <- table(infer$induab, infer$infert)
barplot(counts1, main= "Infertility in Induced abortion"
,xlab ="Infertility", col=c("blue", "red","brown"),
legend=rownames(counts1), besides=TRUE)
counts1 <- table(infer$induab, infer$infert)
barplot(counts1, main= "Infertility in Induced abortion"
,xlab ="Infertility", col=c("blue", "red","yellow"),
legend=rownames(counts1), besides=TRUE)
counts1 <- table(infer$induab, infer$infert)
barplot(counts1, main= "Infertility in Induced abortion"
,xlab ="Infertility", col=c("green", "yellow","red"),
legend=rownames(counts1), besides=TRUE)
counts1 <- table(infer$induab, infer$infert)
barplot(counts1, main= "Infertility in Induced abortion"
,xlab ="Infertility", col=c("blue", "yellow","red"),
legend=rownames(counts1), besides=TRUE)
barplot(counts2, main= "Infertility in Spontaneous abortion"
,xlab ="Infertility", col=c("blue", "yellow","red"),
legend=rownames(counts2), besides=TRUE)
counts2 <- table(infer$sponab, infer$infert)
barplot(counts2, main= "Infertility in Spontaneous abortion"
,xlab ="Infertility", col=c("blue", "yellow","red"),
legend=rownames(counts2), besides=TRUE)
logmodel <- glm(infert ~ age + education + par + induab + sponab,data=infer, family="binomial")
summary(logmodel)
confint(logmodel)
wald.test(b=coef(logmodel), Sigma= vcov(logmodel), Terms=4:6)
oddsratio<-exp(cbind(OR=coef(logmodel), confint(logmodel)))
oddsratio
counts1 <- table(infer$induab, infer$infert)
barplot(counts1, main= "Infertility in Induced abortion"
,xlab ="Infertility", col=c("blue", "brown","red"),
legend=rownames(counts1), besides=TRUE)
counts2 <- table(infer$sponab, infer$infert)
barplot(counts2, main= "Infertility in Spontaneous abortion"
,xlab ="Infertility", col=c("blue", "brown","red"),
legend=rownames(counts2), besides=TRUE)
counts1 <- table(infer$induab, infer$infert)
barplot(counts1, main= "Infertility in Induced abortion"
,xlab ="Infertility", col=c("light blue", "light yellow","red"),
legend=rownames(counts1), besides=TRUE)
counts1 <- table(infer$induab, infer$infert)
barplot(counts1, main= "Infertility in Induced abortion"
,xlab ="Infertility", col=c("light green", "light yellow","light red"),
legend=rownames(counts1), besides=TRUE)
counts1 <- table(infer$induab, infer$infert)
barplot(counts1, main= "Infertility in Induced abortion"
,xlab ="Infertility", col=c("light green", "light yellow","light blue"),
legend=rownames(counts1), besides=TRUE)
barplot(counts2, main= "Infertility in Spontaneous abortion"
,xlab ="Infertility", col=c("light green blue", "light yellow","light blue"),
legend=rownames(counts2), besides=TRUE)
counts2 <- table(infer$sponab, infer$infert)
barplot(counts2, main= "Infertility in Spontaneous abortion"
,xlab ="Infertility", col=c("light green blue", "light yellow","light blue"),
legend=rownames(counts2), besides=TRUE)
counts2 <- table(infer$sponab, infer$infert)
barplot(counts2, main= "Infertility in Spontaneous abortion"
,xlab ="Infertility", col=c("light green blue", "light yellow","light blue"),
legend=rownames(counts2))
counts2 <- table(infer$sponab, infer$infert)
barplot(counts2, main= "Infertility in Spontaneous abortion"
,xlab ="Infertility", col=c("light green", "light yellow","light blue"),
legend=rownames(counts2))
barplot(counts1, main= "Infertility in Induced abortion"
,xlab ="Infertility", col=c("light green", "light yellow","light blue"),
legend=rownames(counts1))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
library(devtools)
packageVersion("devtools")
library(devtools)
library(devtools)
install_github("Jeegan253/hello-R")
install_github("Jeegan253/hello-R/Pertcase")
library(Pertcase)
Exp_case(95,86)
library(devtools)
install_github("Jeegan253/hello-R/Pertcases", force = True)
install_github("Jeegan253/hello-R/Pertcase", force = True)
install_github("Jeegan253/hello-R/Pertcases")
install_github("Jeegan253/hello-R/Pertcase")
install_github("Jeegan253/hello-R/Pertcase", "force=True")
install_github("Jeegan253/hello-R/Pertcase", force = T)
library(Pertcase)
Pertcase
Exp_case(96,85)
library(devtools)
install_github(Jeegan253/hello-R/Pertcase)
install_github("Jeegan253/hello-R/Pertcase", force = T)
library(Pertcase)
Exp_case(99,90)
Exp(99,92)
Exp_case(99,91)
Exp_case(99,85)
Exp_case(96,90)
Exp_case(96,85)
Exp_case(99,87)
Exp_case(99,88)
Exp_case(97,85)
Exp_case(98,84)
Exp_case(99,85)
Exp_case(99,86)
library(devtools)
install_github("Jeegan253/hello-R/Pertcase")
library(Pertcase)
otype(Exp_case(95,85))
library(datasets)
install.packages("pryr")
typeof(Exp_case(95,85))
otype (Exp_case(95,85))
isS4(Exp_case(95,85))
Vaccine<- read.csv(choose.files(), header=T)
Vaccine
linearmod = lm(Cases ~ DTP3+DTP4, data=Vaccine)
summary(linearmod)
typeof(linearmod)
isS4(linearmod)
class(linearmod)
class(Exp_case(95,85))
library(pryr)
otype (Exp_case(96,85))
otype(Vaccine)
otype(linearmod)
Exp_case <- function(x,y) {
cases <- (277288.7 -(5988.2*x) + (3710.9*y))
UseMethod(return(cases))
}
Exp_case(95,85)
otype(Exp_case(96,86))
otype(return(cases))
otype
Exp_case <- function(x,y) {
cases <- (277288.7 -(5988.2*x) + (3710.9*y))
Predicted cases <- UseMethod(return(cases))
print(Predicted cases)
}
Exp_case <- function(x,y) {
cases <- (277288.7 -(5988.2*x) + (3710.9*y))
Predicted cases <- Usemethod(print(cases))
print(Predicted cases)
}
Exp_case <- function(x,y) {
cases <- (277288.7 -(5988.2*x) + (3710.9*y))
Pred_cases <- Usemethod(print(cases))
print(Predicted cases)
}
Exp_case <- function(x,y) {
cases <- (277288.7 -(5988.2*x) + (3710.9*y))
Pred_cases <- Usemethod(return(cases))
print(Predicted cases)
}
Exp_case <- function(x,y) {
cases <- (277288.7 -(5988.2*x) + (3710.9*y))
Pred_cases <- return(cases)
print(Predicted cases)
}
Exp_case <- function(x,y) {
cases <- (277288.7 -(5988.2*x) + (3710.9*y))
Pred_cases <- Usemethod(return(cases))
Print(Pred_cases)
}
otype(Exp_case(95,86))
Exp_case <- function(x,y) {
cases <- (277288.7 -(5988.2*x) + (3710.9*y))
Pred_cases <- return(cases)
Print(Pred_cases)
}
otype(Exp_case(95,86))
Exp_case <- function(x,y) {
cases <- (277288.7 -(5988.2*x) + (3710.9*y))
Pred_cases <- print (cases)
Pred_cases
}
otype(Exp_case(95,86))
isS4(Exp_case(96,87))
Exp_case <- function(x,y) {
cases <- (277288.7 -(5988.2*x) + (3710.9*y))
print(cases,x,y)
}
Exp_case(95,86)
Exp.case <- function(x,y) {
cases <- (277288.7 -(5988.2*x) + (3710.9*y))
print(cases)
}
Exp.case <- function(x,y) {
cases <- (277288.7 -(5988.2*x) + (3710.9*y))
print.case <- usemethod(print(cases))
print.case
}
Exp.case(5,85)
setwd("~/GitHub/hello-R/Pertcase")
setwd("~/")
coverage<- read.csv(choose.files(), header=T)
coverage
library(devtools)
install.packages("Jeegan253/hello-R/Pertcase")
library(Pertcase)
setwd("~/GitHub/hello-R")
